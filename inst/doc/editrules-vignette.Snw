%\VignetteIndexEntry{Editrules, define and check linear data restrictions}
\documentclass[10pt, fleqn, a4paper]{article}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb}
\title{The {\tt editrules} vignette}
\author{Edwin de Jonge and Mark van der Loo}
\begin{document}
\maketitle
\begin{abstract}
{\tt editrules} is a package to define, parse, manipulate and check linear and other
data restrictions in R. Verbose restrictions can be entered at the
commandline or stored as a (text) file or a database.
This vignette is under construction.
\end{abstract}


\section{Introduction}
<<echo=FALSE, keep.source=FALSE>>=
library(editrules)
@
\maketitle

Data processing methods always impose restrictions on the type and format of
data that may enter the method. Well-known cases include linear (in)equality
restrictions in optimizations or the rules used in data checking and cleaning
prior to analysis. Rules used for the purpose of data cleaning include, but are
usually not limited to the linear (in)equalities mentioned before. They might
include restrictions on certain value combinations of categorical variables for
instance. These restrictions are usually referred to as {\em edit rules}, or
{\em edits} in short. For the remainder of this paper we will use these terms
as well.

{\tt editrules} is a package to define, parse and manipulate edits with {\tt R}
in a convenient way. Moreover, it is possible to apply edits to a dataset to
obtain a list of edit violations per record. The current version can handle
linear (in)equality restrictions. Future versions with more versatile edits are
planned.


\section{A simple example}
Suppose you have the following data,
<<keep.source=TRUE>>=
balance <- data.frame(
    cost      = c( 75, 300, 70),
    profit    = c(125,  40, 10),
    turnover  = c(200, 320, 80))
@
subject to the linear restrictions:
\begin{eqnarray}
{\rm turnover} &=& {\rm profit} + {\rm cost}\\
\frac{\rm profit}{\rm turnover} &\leq& 0.6
\end{eqnarray}
In the {\tt editrules} package these rules can be checked as follows\footnote{The extra brackets around assign statements
are included only to force R to print the result after assignment.}.
<<keep.source=TRUE>>=
E <- editmatrix(c(
    "turnover == cost + profit",
    "profit   <= 0.6*turnover"))
@
Find out which record violates any edit:
<<>>=
(valid <- checkRows(E, balance))
@
and list the errors.
<<>>=
listViolatedEdits(E, balance)
@
So the first record violates edit {\tt e2}, the second record violates {\tt e1} and the third record is clean.

\section{Verbose input of linear (in)equality constraints}
In many statistical and optimization problems, one has to represent a set of 
linear (in)equalities in matrix a matrix form:
\begin{equation}
Ax = x_0, \textrm{ and/or } Ax = x_0 \textrm{ and/or } Ax \leq x_0.
\end{equation}
However, in practice, these restrictions are often formulated verbatim and have to be translated
to the matrix form by the statistician. The {\tt editrules} package facilitates this by allowing
a user to write linear (in)equality constraints in {\tt R} language and translating it to an {\tt S3}
object of type {\tt editmatrix}. Constraints can be entered as a text vector, as in the example
above, or read from a {\tt data.frame} whith the columns:\\

\begin{tabular}{ll}
{\tt name} & {\tt character}  names an edit\\
{\tt edit} & {\tt character}  contains the edit in the form of an R expression\\
{\tt description} & {\tt character} a description of the edit.
\end{tabular}\\

For example, the edits in the previous section can be entered as
<<keep.source=TRUE>>=
(edits <- data.frame(
    name  = c("balance","suspect"),
    edit  = c("turnover == cost + profit", 
              "profit <= 0.6*turnover"),
    description = c("balance check",
                    "suspiciously high turnover")))
@
Translating these verbose rules can be done with the {\tt editmatrix} command.
<<>>=
(E <- editmatrix(edits))
@
Here, {\tt E} is an object of class {\tt editmatrix} which is a standard {\tt R} {\tt matrix}
with some extra attributes to store edit information. It can be coerced to a normal {\tt matrix}
object with {\tt as.matrix}.

The edit matrix {\tt E} contains information on following system of linear (in)equalities.
\begin{equation}
Ex = C
\end{equation}

\begin{equation}
Ex \leq C
\end{equation}

\begin{equation}
Ex < C
\end{equation}


{\tt getC} retrieves the constant part of the system of linear (in)equalities.
<<>>=
getC(E)
@

{\tt getOps} retrieves the comparison operator part of the system of linear (in) equalities.
<<>>=
getOps(E)
@

It can be used to check if all {\tt ops} are the same or split {\tt E} into several smaller edit matrices.

If an {\tt editmatrix} is created with {\tt normalize = TRUE}, all edits will be transformed into {\tt ==},{\tt <} and/or ${\tt \leq }$ form. This option facilitates the mixed specification of edits.

{\tt getVars} retrieves the variables that are part of the linear (in) equalities.
<<>>=
getVars(E)
@

An important step in data correction and imputation is error location. Determining which variables are used in violated edits is a necessary part. This can be easily done using {\tt getVars} and {\tt violatedEdits}.

\end{document}
